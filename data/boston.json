{"232255458":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/232255458/","description":"<p>Have you ever wished GUI tools for building visuals like PowerPoint and Illustrator had a more programming-like interface for making similar images rather than copying, pasting, and tweaking all the time? Have you ever wished programmatic systems like LaTeX and Processing.js allowed you to just click and drag on items in the output to change the result, rather than going through an edit-compile-run cycle every time? In some of the latest research, you can have both!</p> <p>In this talk, Jon Schuster will discuss \"Programmatic and Direct Manipulation, Together at Last\" [1] from this year's PLDI (Conference on Programming Language Design and Implementation). The paper proposes a method to automatically edit an SVG-generating program to match the changes made by dragging components of the resulting image around the canvas, while still allowing the developer to edit the code directly. A prototype is available online [2], so expect interactive demos!</p> <p>A shorter position paper [3] that discusses the overall goal and strategy from a higher-level is also available.</p> <p>Bio: Jon Schuster is a PhD student at Northeastern University studying techniques for reasoning about programming with actors, as in Erlang and Scala's Akka framework. A former software developer, he hopes to soon return to industry and work on bringing brilliant ideas from academia into the real world.</p> <p>[1] <a href=\"http://arxiv.org/abs/1507.02988\"><a href=\"http://arxiv.org/abs/1507.02988\" class=\"linkified\">http://arxiv.org/abs/1507.02988</a></a><br/>[2] <a href=\"http://ravichugh.github.io/sketch-n-sketch/\"><a href=\"http://ravichugh.github.io/sketch-n-sketch/\" class=\"linkified\">http://ravichugh.github.io/sketch-n-sketch/</a></a><br/>[3] <a href=\"http://arxiv.org/abs/1510.06788\"><a href=\"http://arxiv.org/abs/1510.06788\" class=\"linkified\">http://arxiv.org/abs/1510.06788</a></a></p> ","photos":[],"venue":{"lat":42.35319900512695,"address1":"One Marina Park Drive - 11th floor ","address2":null,"name":"Battery Ventures","postalCode":"","lon":-71.04535675048828,"country":"us","city":"Boston"},"utcOffset":-14400000,"time":1473372000000,"title":"Jonathan Schuster on Programmatic and Direct Manipulation, Together at Last"},"241328233":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/241328233/","description":"<p>Join us for some programming language pragmatics!  Joe Jevnik will present Simon Peyton Jone's \"<a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/1992/04/spineless-tagless-gmachine.pdf\">Implementing lazy functional languages on stock hardware: the Spineless Tagless G-machine</a>\".</p> <p>Paper abstract:</p> <p>The Spineless Tagless G-machine is an abstract machine designed to support nonstrict higher-order functional languages. This presentation of the machine falls into three parts. Firstly, we give a general discussion of the design issues involved in implementing non-strict functional languages.</p> <p><br/>Next, we present the <i>STG language</i>, an austere but recognisably-functional language, which as well as a <i>denotational</i> meaning has a well-defi ned <i>operational</i> semantics. The STG language is the \"abstract machine code\" for the Spineless Tagless G-machine.</p> <p>Lastly, we discuss the mapping of the STG language onto stock hardware. The success of an abstract machine model depends largely on how e cient this mapping can be made, though this topic is often relegated to a short section. Instead, we give a detailed discussion of the design issues and the choices we have made. Our principal target is the C language, treating the C compiler as a portable assembler.</p> ","photos":[],"venue":{"lat":42.36275863647461,"address1":"355 Main Street, ","address2":null,"name":"Google - Cambridge Office ","postalCode":"","lon":-71.08711242675781,"country":"us","city":"cambridge "},"utcOffset":-14400000,"time":1499810400000,"title":"Implementing lazy functional languages on stock hardware (Joe Jevnik)"},"243975699":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/243975699/","description":"<p>We're very excited to have Heather Miller reprise her <a href=\"https://pwlconf.org/2017/heather-miller/\">PWLConf talk</a>!</p> <p><b>Abstract</b></p> <p>Nowadays, most programs we write are in some sense distributed—making HTTP requests or serving responses over HTTP, fetching or computing data on some remote resource, building some microservice that is meant to interact with others, etc. With all of this distribution going on, one might ask, what happened to distributed programming languages? Why are we still using languages like Java or C++ for these sorts of tasks? In this talk, Heather will take us on a whirlwind tour through history up to the present of distributed programming languages as well as programming constructs meant for distribution like futures and RPC. Together, we'll try to work out what happened to all of the distributed programming languages!</p> <p><b>References</b> <a href=\"https://github.com/heathermiller/dist-prog-book\">Programming Models for Distributed Computation</a> by Heather Miller and her students in<a href=\"http://heather.miller.am/teaching/cs7680/\">CS7680 Special Topics in Computing Systems</a>, a course at Northeastern University</p> <p><a href=\"https://pdos.csail.mit.edu/6.824/papers/argus88.pdf\">Distributed Programming in Argus</a> by B. Liskov</p> <p><a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.147.3932&amp;rep=rep1&amp;type=pdf\">Distribution and Abstract Types in Emerald</a> by A.Black, N. Hutchinson, E. Jul, H. Levy, and L.Carter</p> <p><a href=\"http://heather.miller.am/teaching/cs7680/pdfs/Linda-Alternative-to-Message-Passing.pdf\">The Linda alternative to message-passing systems</a> by N.J. Carriero, D. Gelernter, T.G. Mattson, and A.H. Sherman</p> <p><a href=\"https://pdfs.semanticscholar.org/a376/4c0986b0eecab2922c26a0472e83d17d4431.pdf\">Scala Actors: Unifying thread-based and event-based programming</a> by P. Haller and M. Odersky</p> <p><a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/remote.pdf\">Towards Haskell in the Cloud</a> by J. Epstein, A.P. Black, and S.P. Jones</p> <p><a href=\"https://www.info.ucl.ac.be/~pvr/ppdp-2015-cr.pdf\">Lasp: A Language for Distributed, Coordination-Free Programming</a> by C. Meiklejohn and P.V. Roy</p> ","photos":[],"venue":{"lat":42.36275863647461,"address1":"355 Main Street, ","address2":null,"name":"Google - Cambridge Office ","postalCode":"","lon":-71.08711242675781,"country":"us","city":"cambridge "},"utcOffset":-14400000,"time":1508796000000,"title":"What happened to distributed programming languages? (Heather Miller)"},"232255392":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/232255392/","description":"<p><b>Tim Riser on Mastering the Game of Go with Deep Neural Networks &amp; Tree Search</b></p> <p><br/>A grand challenge of AI has fallen - a decade earlier than the ever-abused experts predicted. But should we care?</p> <p>What made AlphaGo, the AI built by DeepMind, so unique? </p> <p>To dive into AlphaGo's system of learning, evaluation, and search algorithms that combined to defeat the reigning Go world champion, Tim will be presenting on \"Mastering the Game of Go with Deep Neural Networks &amp; Tree Search\", a paper by Google DeepMind.</p> <p><a href=\"http://airesearch.com/wp-content/uploads/2016/01/deepmind-mastering-go.pdf\"><a href=\"http://airesearch.com/wp-content/uploads/2016/01/deepmind-mastering-go.pdf\" class=\"linkified\">http://airesearch.com/wp-content/uploads/2016/01/deepmind-mastering-go.pdf</a></a></p> <p><b>Bio:</b></p> <p>Tim Riser is currently researching at the Berkman Center for Internet &amp; Society at Harvard University. He graduated from Brigham Young University with a dual degree in Applied Computational Mathematics and Economics.</p> ","photos":[],"venue":{"lat":42.35319900512695,"address1":"One Marina Park Drive - 11th floor ","address2":null,"name":"Battery Ventures","postalCode":"","lon":-71.04535675048828,"country":"us","city":"Boston"},"utcOffset":-14400000,"time":1469743200000,"title":"Tim Riser on Mastering the Game of Go with Deep Neural Networks & Tree Search"},"242585331":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/242585331/","description":"<p>Join us as <a href=\"http://twitter.com/csvoss/\">Chelsea Voss</a> presents a handful of papers on DNA computing:</p> <p>• Leonard Adleman (the \"A\" in RSA). <a href=\"http://www.cs.virginia.edu/~robins/Computing_with_DNA.pdf\">Computing with DNA</a>. </p> <p>• Faulhammer et al. Molecular computation: <a href=\"http://www.pnas.org/content/97/4/1385.full\">RNA solutions to chess problems</a>. </p> <p>• Qian + Winfree's <a href=\"http://courses.cs.washington.edu/courses/cse599x/10sp/qian_circuits.pdf\">Strand displacement circuits</a></p> <p>• Rothemund + Winfree + Papadakis, <a href=\"http://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0020424\">Algorithmic Self-Assembly of DNA Sierpinski Triangles</a> – \"DNA origami\" implementing cellular automata</p> ","photos":[],"venue":{"lat":42.36275863647461,"address1":"355 Main Street, ","address2":null,"name":"Google - Cambridge Office ","postalCode":"","lon":-71.08711242675781,"country":"us","city":"cambridge "},"utcOffset":-14400000,"time":1504216800000,"title":"DNA computing (Chelsea Voss)"},"237933920":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/237933920/","description":"<p>Godel's Incompleteness Theorems are among the most famous results in modern mathematics.  They are often informally stated as follows:</p> <p>1. Any formal system that can express elementary arithmetic contains statements that are \"true but not provable\".</p> <p>2. Any consistent formal system that can express elementary arithmetic cannot prove its own consistency.</p> <p>These informal statements, however, often raise more questions than they answer.  What exactly is a \"formal system\"? What does it mean for a statement to be \"true but not provable\"?  What does it mean to \"express arithmetic\", and why does arithmetic have anything to do with proof or consistency?</p> <p>This talk will introduce the audience to the main ideas behind the incompleteness theorems.  We'll discuss the historical context in which the incompleteness theorems were discovered, develop the concepts necessary to properly understand what the theorems actually say, and present a sketch of the theorems' proof.</p> <p><br/>References: </p> <p><a href=\"https://plato.stanford.edu/entries/goedel-incompleteness/\"><a href=\"https://plato.stanford.edu/entries/goedel-incompleteness/\" class=\"linkified\">https://plato.stanford.edu/entries/goedel-incompleteness/</a></a></p> <p><a href=\"http://www.karlin.mff.cuni.cz/~krajicek/smorynski.pdf\"><a href=\"http://www.karlin.mff.cuni.cz/~krajicek/smorynski.pdf\" class=\"linkified\">http://www.karlin.mff.cuni.cz/~krajicek/smorynski.pdf</a></a></p> <p><br/>Bio:</p> <p>Scott Sanderson is a Senior Engineer at Quantopian, where he is responsible for designing and implementing Python APIs for algorithmic trading. Prior to working at Quantopian, Scott studied Mathematics and Philosophy at Williams College, where he maintained an interest in the logical foundations of mathematics and computer science.</p> ","photos":[],"venue":{"lat":42.36275863647461,"address1":"355 Main Street, ","address2":null,"name":"Google - Cambridge Office ","postalCode":"","lon":-71.08711242675781,"country":"us","city":"cambridge "},"utcOffset":-18000000,"time":1488841200000,"title":"Godel's Incompleteness Theorems"},"235786123":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/235786123/","description":"<p>\"You are not expected to understand this.\" That is the now famous comment in UNIX v6's process switching (swtch) code. Process switching -- and multitasking more generally -- is a neat magic trick the OS pulls off. It's a delicate dance between the operating system and the hardware. We will dig into how this dance works on UNIX v6 and the PDP11, including the famous comment. We will also look into how the process switching magic happens on a more recent OS and CPU architecture (FreeBSD on x86). It should be a fun trip down the rabbit hole of operating system kernels internals and instruction set specifications</p> ","photos":[],"venue":{"lat":42.36275863647461,"address1":"355 Main Street, ","address2":null,"name":"Google - Cambridge Office ","postalCode":"","lon":-71.08711242675781,"country":"us","city":"cambridge "},"utcOffset":-18000000,"time":1481151600000,"title":"You are not expected to understand this - Arun Thomas on Unix Process Switching"},"229399527":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/229399527/","description":"<p><b>PWL Boston / Cambridge is back! </b></p> <p>Ripped from the headlines, but not Law and Order,  Richard Littauer will be presenting on <a href=\"http://web.cs.ucdavis.edu/~rogaway/papers/moral-fn.pdf\">\"The Moral Character of Cryptographic Work\" </a>by Phillip Rogaway of UC Davis. </p> <p><b>Bio</b></p> <p>\"Richard Littauer is a computer scientist and developer who lives in Cambridge. He works for IPFS (<a href=\"http://ipfs.io\">ipfs.io</a>), building a distributed, permanent internet, and reads papers and books in his constantly dwindling spare time. He's most well known for writing the dictionary for the Na'vi language, and for getting paid to review websites while drunk at <a href=\"http://theuserisdrunk.com\">theuserisdrunk.com</a>.\"</p> <p><b>Logistics</b></p> <p><br/>PWL Boston / Cambridge is hosted at the Battery Ventures office in the Seaport:</p> <p><br/>One Marina Park Drive, FL 11</p> <p>Boston, MA 02210</p> <p>Upon arriving at One Marina Park Drive, you will need your IDs to check in with security in the lobby. You will then be directed to the 11th floor.</p> <p>Parking is available in the garage at One Marina Park Drive for a cost of $15, if you enter after 5:00 p.m. There are also 2 open lots at 50 &amp; 85 Northern Ave, as well as metered street parking. The building is walkable from the Courthouse stop on the Silver Line and South Station.</p> <p>Agenda </p> <p>6-6.30 – Mingle / Eat</p> <p>6.30 - 7.30 - Talk by Richard Littauer on \"The Moral Character of Cryptographic Work\" by Phillip Rogaway </p> <p>7.30- 8.00 - Q&amp;A </p> <p>8.00  - Adjourn</p> ","photos":[],"venue":{"lat":42.35319900512695,"address1":"One Marina Park Drive - 11th floor ","address2":null,"name":"Battery Ventures","postalCode":"","lon":-71.04535675048828,"country":"us","city":"Boston"},"utcOffset":-14400000,"time":1458770400000,"title":"Richard Littauer  on The Moral Character of Cryptographic Work"},"234829295":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/234829295/","description":"<p><b>An oversimplified history of CSP</b></p> <p>Communicating Sequential Processes (CSP) was first described by Tony Hoare in 1978.  Since then, there have been two main \"branches\" of further development.  In the first branch, CSP inspired how concurrency is handled in an ongoing series of programming languages — most recently (and famously) in Go.  In the second branch, CSP was refined into a rigorous \"process calculus\", and has since been used to formally prove various safety and liveness properties of concurrent and distributed systems.</p> <p>This talk will be a whirlwind history of CSP, a high-level overview of the process calculus, and some live demos of using a refinement checker to prove things about interesting systems.  (No proving things by hand!)</p> <p>CAR Hoare.  \"<a href=\"http://link.springer.com/chapter/10.1007/978-1-4757-3472-0_16\">Communicating Sequential Processes</a>\", CACM 21(8), pp. [masked], 1978.</p> <p>CAR Hoare.  <a href=\"http://www.usingcsp.com/\"><i>Communicating Sequential Processes</i></a>.  Prentice Hall, 1985.</p> <p>AW Roscoe.  <a href=\"https://www.cs.ox.ac.uk/bill.roscoe/publications/68b.pdf\"><i>The theory and practice of concurrency</i></a>.  Prentice Hall, 1998.</p> <p>Douglas Creager is a software engineer at Google.  He first learned about CSP as a grad student at Oxford.  In the not-too-distant past, he used CSP to do something <a href=\"http://dcreager.net/publications/014-csp-algorithm-study/\">empirically useful</a>.</p> ","photos":[],"venue":{"lat":42.36275863647461,"address1":"355 Main Street, ","address2":null,"name":"Google - Cambridge Office ","postalCode":"","lon":-71.08711242675781,"country":"us","city":"cambridge "},"utcOffset":-14400000,"time":1477432800000,"title":"An oversimplified history of CSP  -Talk by Douglas Creager"},"229581624":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/229581624/","description":"<p><b>PWL Boston / Cambridge </b></p> <p>We are thrilled to have Peter Bailis as the speaker for our April meeting.  Peter is brilliant researcher and outstanding speaker.  He will be presenting on <a href=\"http://www.vldb.org/conf/2002/S07P01.pdf\">Streaming Queries over Streaming Data\" from VLDB 2002</a> by Sirish Chandrasekaran and Michael J. Franklin. </p> <p>If you are looking for a preview of the type of talks Peter gives, check out <a href=\"https://www.youtube.com/watch?v=txP7CI0PjO4\">this talk</a> given at the PWL SF chapter in late 2014 on <a href=\"https://www.cs.berkeley.edu/~brewer/cs262b/update-conflicts.pdf\">Bayou</a></p> <p><b>Bio</b></p> <p>After spending this year visiting MIT CSAIL, Peter Bailis will join Stanford Computer Science as an assistant professor. Peter's research in the Future Data Systems group (<a href=\"http://futuredata.stanford.edu\"><a href=\"http://futuredata.stanford.edu\" class=\"linkified\">http://futuredata.stanford.edu</a></a>) focuses on the design and implementation of next-generation data-intensive systems. His work spans novel distributed protocol design, large-scale data management, and architectures for high-volume complex decision support. He is the recipient of a NSF Graduate Research Fellowship, a Berkeley Fellowship for Graduate Study, best-of-conference citations for research appearing in SIGMOD and VLDB, and a CRA Outstanding Undergraduate Researcher Award. He received a Ph.D. in Computer Science from UC Berkeley in 2015 and an A.B. from Harvard College in 2011.</p> <p><br/><b>Logistics </b></p> <p>PWL Boston / Cambridge is hosted at the Battery Ventures office in the Seaport: </p> <p>One Marina Park Drive, FL 11</p> <p>Boston, MA 02210</p> <p>Upon arriving at One Marina Park Drive, you will need your IDs to check in with security in the lobby. You will then be directed to the 11th floor.</p> <p>Parking is available in the garage at One Marina Park Drive for a cost of $15, if you enter after 5:00 p.m. There are also 2 open lots at 50 &amp; 85 Northern Ave, as well as metered street parking. The building is walkable from the Courthouse stop on the Silver Line and South Station.</p> <p>Agenda </p> <p>6-6.30 – Mingle / Eat</p> <p>6.30 - 7.30 - Talk </p> <p>7.30- 8.00 - Q&amp;A </p> <p>8.00  - Adjourn</p> ","photos":[],"venue":{"lat":42.35319900512695,"address1":"One Marina Park Drive - 11th floor ","address2":null,"name":"Battery Ventures","postalCode":"","lon":-71.04535675048828,"country":"us","city":"Boston"},"utcOffset":-14400000,"time":1461276000000,"title":"Peter Bailis on Streaming Queries Over Streaming Data"},"230987877":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/230987877/","description":"<p>History! Those who don't know it are doomed to etc.</p> <p>Smalltalk is one of the earliest object-oriented languages. It's extremely influential — many of the OO concepts that we use in today's languages were first developed in Smalltalk. But what influenced Smalltalk? Alan Kay will walk us through the language's inspirations in this talk, including such crazy new technologies as UIs with overlapping windows and a 1970's-era ur-tablet!</p> <p><a href=\"http://worrydream.com/EarlyHistoryOfSmalltalk/\" class=\"linkified\">http://worrydream.com/EarlyHistoryOfSmalltalk/</a></p> <p>Bio:</p> <p>Douglas Creager is a software engineer at Google with an eclectic history. He got a CS Master's from MIT working in a biology group, and a PhD from Oxford while teaching formal methods to professional software engineers. He's worked as a consultant helping finance and telecoms firms wrangle data between different systems, and was VP of Engineering for a network security startup based out of DC. He lives deep in the western suburbs, but realizes that “Papers We Love Worcester” doesn't have quite the same ring to it.</p> ","photos":[],"venue":{"lat":42.35319900512695,"address1":"One Marina Park Drive - 11th floor ","address2":null,"name":"Battery Ventures","postalCode":"","lon":-71.04535675048828,"country":"us","city":"Boston"},"utcOffset":-14400000,"time":1464300000000,"title":"Douglas Creager on The Early History Of Smalltalk by Alan C. Kay"},"229948866":{"url":"https://www.meetup.com/Papers-We-Love-Boston-Cambridge/events/229948866/","description":"<p>What we gonna do right now is go back.</p> <p>How far back?</p> <p>Way back.</p> <p><b>Intro- </b>You probably know that many influential technologies were developed by Xerox: Ethernet, networking protocols, bitmapped workstations, laser printing technology and object oriented programing, etc. </p> <p>So brush up on your OSI model and be ready to dive into networking archeology. Come here the story of XNS, which became the canonical protocol in early days of local area networking.  </p> <p>XNS greatly influenced protocols such as Novell NetWare, and Banyan VINES, AppleTalk and lives on within the corners of the Internet.  <a href=\"https://goo.gl/Ev3atn\"><a href=\"https://goo.gl/Ev3atn\" class=\"linkified\">https://goo.gl/Ev3atn</a></a></p> <p><b>BIO -</b></p> <p>Steven Willis is an engineer, executive and co-founder of networking companies such as Wellfleet and Argon.  From 1982 to 1986, he worked as a developer at Interlan, one of the original Ethernet controller companies, developing commercial implementations of the XNS and TCP/IP protocols. In 1986, he co-founded Wellfleet Communications, an early Internet router company, where he ran software development for Wellfleet's high-performance, multi-protocol routers. Wellfleet went public in 1991 and merged with Synoptics to create Bay Networks in 1994. In 1997, he co-founded Argon Networks, a maker of high-performance SONET based Internet core switch/routers, which was purchased by Siemens in 1999. In 2001, he joined Datapower, a company focused on innovative XML processing and data transformation, as the VP of Advanced Technology. In 2009, he co-founded Overlook Networks, a venture addressing new networking technology in the data center. His most current project is in the area of optical packet switching. Steve has contributed to the standardization of network management, BGP, IS-IS, ATM, Point-to-Point protocols, QOS and traffic management.</p> <p>He recently co-authored \"Cryptographic Rule Based Trading\" in the 2012 Journal of Financial Cryptography and Data Security.  He is a member of the MIT Venture Mentoring Service; a co-founder of Venture Valley Mentors; and an advisor to Solano Labs, Philo, and other startups in the Boston area. He holds multiple patents in the field of computer networking.  Steve received his B.S. in BDIC with a concentration in Computer Science from the University of Massachusetts Amherst in </p> <p>\n\n<b>Logistics </b></p> <p>PWL Boston / Cambridge is hosted at the Battery Ventures office in the Seaport: </p> <p>One Marina Park Drive, FL 11</p> <p>Boston, MA 02210</p> <p>Upon arriving at One Marina Park Drive, you will need your IDs to check in with security in the lobby. You will then be directed to the 11th floor.</p> <p>Parking is available in the garage at One Marina Park Drive for a cost of $15, if you enter after 5:00 p.m. There are also 2 open lots at 50 &amp; 85 Northern Ave, as well as metered street parking. The building is walkable from the Courthouse stop on the Silver Line and South Station.</p> <p>Agenda </p> <p>6-6.30 – Mingle / Eat</p> <p>6.30 - 7.30 - Talk </p> <p>7.30- 8.00 - Q&amp;A </p> <p>8.00  - Adjourn</p> ","photos":[],"venue":{"lat":42.35319900512695,"address1":"One Marina Park Drive - 11th floor ","address2":null,"name":"Battery Ventures","postalCode":"","lon":-71.04535675048828,"country":"us","city":"Boston"},"utcOffset":-14400000,"time":1466114400000,"title":"Steve Willis on Xerox Network Systems (XNS)"}}